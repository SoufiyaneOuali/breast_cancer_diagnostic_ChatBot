# -*- coding: utf-8 -*-
"""Task_3_5_Breast_Cancer_diagnostic_boot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OoMOYMOmhbBhKg-Jkjlz5UxfiysRbEZt

## **breast Cancer Diagnostic**
"""

# cd drive/MyDrive/Data/Task3_predict_data/

# !ls
import torch
from torch.nn import Module, Linear
import torch.nn.functional as f
import torch.nn.functional as F

from torch.nn import Linear
from torch.nn import BCELoss, Module
from torch.optim import Adam
import pandas as pd
from torch import Tensor, save
import numpy as np
import pickle
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import f1_score

import warnings
warnings.filterwarnings('ignore')

import pickle

class BreastCancerPrognosisModel(Module):

	def __init__(self):
		super().__init__()
		self.layer_1 = Linear(9, 12)
		self.layer_2 = Linear(12, 4)
		self.layer_3 = Linear(4, 1)

	def forward(self, x):
		x = f.relu(self.layer_1(x))
		x = f.relu(self.layer_2(x))
		x = self.layer_3(x)
		return f.sigmoid(x)

# model = BreastCancerPrognosisModel()
# criterion = BCELoss()
# optimizer = Adam(model.parameters())

# # Headers for the dataset
# columns = ['ID', 'CLUMP_THICKNNESS', 'UNIFORMITY_OF_CELL_SIZE', 'UNIFORMITY_OF_CELL_SHAPE', 'MARGINAL_ADHESION',
# 		   'SINGLE_EPITHELIAL_CELL_SIZE', 'BARE_NUCLEI', 'BLAND_CHROMATIN', 'NORMAL_NUCLEI', 'MITOSIS', 'TARGET_CLASS']

# raw_data = pd.read_csv('breast-cancer-wisconsin.data', header=None)
# raw_data.columns = columns

# # Fill missing values
# raw_data = raw_data.replace('?', np.nan)
# raw_data = raw_data.fillna(raw_data.median())

# # Map benign to 0, malignant to 1
# raw_data['TARGET_CLASS'] = raw_data['TARGET_CLASS'].map({2: 0, 4: 1})
# print(raw_data.tail())
# # Drop the ID column
# raw_data = raw_data.loc[:, raw_data.columns != 'ID']
# columns.remove('ID')

# # Scale the values between 0-1
# scaler = MinMaxScaler()
# y = raw_data['TARGET_CLASS']
# raw_data = scaler.fit_transform(raw_data.drop(['TARGET_CLASS'], axis=1))
# columns.remove('TARGET_CLASS')
# raw_data = pd.DataFrame(raw_data, columns=columns)
# raw_data = pd.concat([raw_data, y], axis=1)
# columns.append('TARGET_CLASS')
# train, test = train_test_split(raw_data, test_size=0.15)
# train = pd.DataFrame(data=train, columns=columns)
# test = pd.DataFrame(data=test, columns=columns)

# # Model training and test data
# X_train = train.loc[:, train.columns != 'TARGET_CLASS']
# Y_train = train['TARGET_CLASS']

# X_test = test.loc[:, test.columns != 'TARGET_CLASS']
# Y_test = test['TARGET_CLASS']
# print('Shape={}'.format(X_train.values.shape))
# n_features_tr = X_train.values.shape[1]
# n_samples_tr = X_train.values.shape[0]

# X_train = Tensor(X_train.values)
# Y_train = Tensor(Y_train.values).reshape(-1, 1)
# X_test = Tensor(X_test.values)
# Y_test = Tensor(Y_test.values).reshape(-1, 1)

# N_epochs = 500

# for i in range(1, N_epochs + 1):
# 	optimizer.zero_grad()

# 	Y_hat = model.forward(X_train)

# 	loss = criterion(Y_hat, Y_train)
# 	loss.backward()
# 	optimizer.step()
# 	print('Loss = {}, epoch = {}'.format(loss.item(), i))

# # Testing
# model.eval()
# print(X_test.shape)
# Y_hat = np.round(model.forward(X_test).detach().numpy())
# accuracy = f1_score(y_pred=Y_hat, y_true=Y_test)
# print('Accuracy: {}'.format(accuracy))

# Saving model and scaler
# save(model.state_dict(), 'breast_cancer_prognosis.pt')
# with open('scaler.pkl', 'wb') as f:
# 	pickle.dump(scaler, f)

# breast_cancer_prognosis
PATH="breast_cancer_prognosis.pt"
module_load=BreastCancerPrognosisModel()
module_load.load_state_dict(torch.load(PATH))
scaler_load=pickle.load(open("scaler.pkl", 'rb'))

def get_info_Continuous(text , subject):
  print(text)
  while True:
    try:
      variable_intered=float(input(""))
      break
    except:
        print("Can you please Enter a valid ",subject)
  
  return variable_intered

def breast_cancer_disease_Bot():  

  flage =True
  while flage:
    print("hello please anter the folowing mesearmunt in order \n to predict the probability of you develepong a cevercal cancer based on your life style habits  \n")
    print("enter Yes to contunious the prisougre and No to close \n ")
    continu_pres=""
    while True:
      continu_pres=input("desicion :  ")
      continu_pres=continu_pres.lower()
      if (continu_pres=="no" or continu_pres=="yes"):
        break
      else:
        print("Please inter a valide answer \n ")

    if (continu_pres=="no"):
      break
 
    # CLUMP_THICKNNESS # UNIFORMITY_OF_CELL_SIZE
    # UNIFORMITY_OF_CELL_SHAPE	 # MARGINAL_ADHESION	
    # SINGLE_EPITHELIAL_CELL_SIZE	 # BARE_NUCLEI	
    # BLAND_CHROMATIN	# NORMAL_NUCLEI # MITOSIS
    
    CLUMP_THICKNNESS=get_info_Continuous("please enter CLUMP THICKNNESS  \n" ,"CLUMP THICKNNESS")
    UNIFORMITY_OF_CELL_SIZE=get_info_Continuous("Oky  telle me UNIFORMITY OF CELL_SIZE  \n","UNIFORMITY OF CELL SIZE")
    UNIFORMITY_OF_CELL_SHAPE=get_info_Continuous("please tell me the  UNIFORMITY OF CELL SHAPE  \n" ,"UNIFORMITY OF CELL SHAPE")
    MARGINAL_ADHESION=get_info_Continuous("please tell me MARGINAL ADHESION  \n","MARGINAL ADHESION")
    SINGLE_EPITHELIAL_CELL_SIZE=get_info_Continuous("please telle me the  SINGLE EPITHELIAL CELL SIZE  \n","SINGLE EPITHELIAL CELL SIZE")
    BARE_NUCLEI=get_info_Continuous("What about the BARE NUCLEI  \n","BARE NUCLEI")
    BLAND_CHROMATIN=get_info_Continuous("BLAND CHROMATIN  \n","BLAND CHROMATIN")
    NORMAL_NUCLEI=get_info_Continuous("NORMAL NUCLEI  \n","NORMAL NUCLEI")
    MITOSIS=get_info_Continuous("last question ,MITOSIS \n","MITOSIS")

    flage = False
    tst=[[CLUMP_THICKNNESS,	UNIFORMITY_OF_CELL_SIZE,
          UNIFORMITY_OF_CELL_SHAPE,MARGINAL_ADHESION,
          SINGLE_EPITHELIAL_CELL_SIZE,BARE_NUCLEI	,	
          BLAND_CHROMATIN	,	NORMAL_NUCLEI,MITOSIS]]

    tst=scaler_load.transform(tst)
    tst = pd.DataFrame(data=tst)
    tst = Tensor(tst.values)
    Y_prd = np.round(module_load.forward(tst).detach().numpy())
    
    Hd_prediction=0
    for i in Y_prd:
      Hd_prediction=i[0]

    if Hd_prediction==1:
      print("Based on the feauter you gived you  are in the average of developing a breast Cancer but you should visit your doctar to check .")
    else: 
      print("with ur current info , you wont have a Breast cancer  but try to stay healthy")

def Run_breast_cancer_disease_Bot():
  while True:
    breast_cancer_disease_Bot()
    print("would you like to do the diagnostic again enter  Yes / No  \n")
    answ=""
    while True:
      answ=input("")
      answ=answ.lower()
      if (answ=="yes" or answ=="no"):
        break
      else:
        print("Please enter a valide answer")
    if answ=="no":
      break

Run_breast_cancer_disease_Bot()
